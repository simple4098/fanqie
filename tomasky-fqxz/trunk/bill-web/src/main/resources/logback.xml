<?xml version="1.0" encoding="UTF-8"?>
<!--
	scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
	scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
 -->
<configuration scan="true" scanPeriod="60 seconds" debug="true">
    <!-- 定义变量APP_NAME用于区分不同应用的的记录 -->
    <property name="APP_NAME" value="tomasky-bill" />
    <!-- 定义变量LOG_HOME用于配置log日志生成的目录  -->
    <property name="LOG_HOME" value="/opt/logs/tomasky-bill/" />
    <!-- 定义输出日志的格式
       %d{yyyy-MM-dd  HH:mm:ss.SSS} 定义日期格式兼容java.text.SimpleDateFormat语法 2014-03-25 14:06:49.812
       %thread 输出产生日志的线程名
       %-5level 输出日志级别
       %logger{80}设置为80表示只输入logger最右边点符号之后的字符串，从最后一个标点符号往前数
       %msg 输出应用程序提供的信息
       %n输出平台相关的分行符“\n”或者“\r\n”
     -->
    <property name="ENCODER_PATTERN" value="%d{yyyy-MM-dd  HH:mm:ss.SSS} [%thread] %-5level %logger{80} - %msg%n" />
    <contextName>${APP_NAME}</contextName>

    <!-- appender是<configuration>的子节点，是负责写日志的组件。
                   两个必要属性name和class。name指定appender名称，class指定appender的全限定名
                 定义控制台appender   class="ch.qos.logback.core.ConsoleAppender"
                 作用：把日志输出到控制台
        <encoder>子节点 对日志进行格式化
        <target>子节点：字符串 System.out 或者 System.err ，默认 System.out ；
    -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>${ENCODER_PATTERN}</Pattern>
        </encoder>
    </appender>

    <!--RollingFileAppender 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件.
            class="ch.qos.logback.core.rolling.RollingFileAppender"
         参数：
         <rollingPolicy>:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。
         <file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。
         <append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
         <encoder>：对记录事件进行格式化
         <triggeringPolicy >: 告知 RollingFileAppender 合适激活滚动。
         <prudent>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。
     -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/output.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>7</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${ENCODER_PATTERN}</pattern>
        </encoder>
    </appender>

    <!--

    -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>7</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${ENCODER_PATTERN}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>WARN</level>
        </filter>
    </appender>

    <!-- 定义包/类级别的 appender-->
    <appender name="HISUN_FILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/order.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>7</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${ENCODER_PATTERN}</pattern>
        </encoder>
    </appender>
    <!--logger 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
        name:用来指定受此loger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF
        addtivity:是否向上级loger传递打印信息。默认是true,会将信息输入到root配置指定的地方
        * 可以包含多个appender-ref，标识这个appender会添加到这个logger
    -->
    <logger name="com.tomasky.bill" level="ALL" addtivity="true">
        <appender-ref ref="HISUN_FILE" />

    </logger>
    <!--
          将root的打印级别设置为“INFO”，指定了名字为"FILE","STDOUT","ERROR_FILE"的appender。
     -->
    <root>
        <level value="INFO" />
        <!--<appender-ref ref="FILE" />-->
        <appender-ref ref="STDOUT"/>
        <!--<appender-ref ref="ERROR_FILE" />-->
    </root>
</configuration>